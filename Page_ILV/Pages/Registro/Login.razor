@page "/login"

@using Page_ILV.Data;
@using System.Net.Http;
@using System.Net.Http.Json;
@inject HttpClient Http;
@inject NavigationManager Navegacion;
@inject AppData appData
@inject IJSRuntime _jsRuntime;

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <title>Registration Form</title>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/style.css">
</head>

<body>
    <div class="container mb-5" id="registration-form">
        <div class="image"></div>
        <div class="frm">
            <h1>Bienvenido de nuevo</h1>
            @if(msg != null)
            {
                <p class="text-danger"><b><i>@msg</i></b></p>
            } 
            <EditForm Model="oRegistro">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="email"><b>Correo:</b></label>
                    <InputText class="form-control" type="email" id="email" placeholder="Escribe tu correo" @bind-Value="@oRegistro.Correo"></InputText>
                    <ValidationMessage For="(() => oRegistro.Correo)" />
                </div>
                <div class="form-group">
                    <label for="pwd"><b>Contraseña:</b></label>
                    <InputText class="form-control" type="password" id="pwd" placeholder="Escribe tu contraseña" @bind-Value="@oRegistro.Password"></InputText>
                    <ValidationMessage For="(() => oRegistro.Password)" />
                </div>
                <div class="mb-1">
                    <button class="btn btn-outline-primary m1" @onclick="IniciarSesion">Iniciar sesion</button>
                    <button class="btn btn-outline-danger m1" @onclick="Cancelar">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</body>

@code {
    private readonly string llaveToken = "token";
    private readonly string llaveIsAdmin = "isAdmin";
    public string token { get; set; }
    public string msg { get; set; }

    [Parameter]
    public string response { get; set; }
    UsuarioRequest oRegistro = new UsuarioRequest();
    Respuesta<UsuarioRequest> oRespuesta = new Respuesta<UsuarioRequest>();
    Respuesta<UsuarioRequest> oRespuestaRegistro = new Respuesta<UsuarioRequest>();

    public string Url = "/api/Usuario/login";

    private void Cancelar() => Navegacion.NavigateTo("/");

    private async Task IniciarSesion()
    {
        if (oRegistro.Correo != null && oRegistro.Password != null && oRegistro.Correo != string.Empty && oRegistro.Password != string.Empty)
        {
            var response = await Http.PutAsJsonAsync<UsuarioRequest>(Url, oRegistro);
            oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<UsuarioRequest>>().Result;

            if (oRespuesta.Data != null)
            {
                await _jsRuntime.InvokeVoidAsync("AgregarCookie", llaveToken, oRespuesta.Data.Token, 45);
                await _jsRuntime.InvokeVoidAsync("AgregarCookie", llaveIsAdmin, oRespuesta.Data.IsAdmin, 45);
                Navegacion.NavigateTo("/", true);
            }
            else
            {
                msg = oRespuesta.Mensaje;
            }
        }
    }
    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(appData.Token))
        {
            token = appData.Token;
        }
    }
}
